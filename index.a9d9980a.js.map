{"mappings":"ACEA,MAAM,EAAY,SAAS,aAAa,CAAC,OAIzC,eAAe,EAAoB,CAAK,EACtC,GAAI,CACF,IAAM,EAAW,MAAM,MAAM,CAAC,0BAA0B,EAAE,EAAM,cAAc,CAAC,EAC/E,GAAI,CAAC,EAAS,EAAE,CACd,MAAM,AAAI,MAAM,CAAC,gCAAgC,EAAE,EAAM,CAAC,EAE5D,IAAM,EAAO,MAAM,EAAS,IAAI,GAChC,GAAI,AAAgB,YAAhB,EAAK,MAAM,CACb,OAAO,EAAK,OAAO,AAEnB,OAAM,AAAI,MAAM,CAAC,iCAAiC,EAAE,EAAM,CAAC,CAE/D,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,CAAC,GACP,IACT,CACF,CAEA,eAAe,EAAe,CAAK,EACjC,GAAI,CACF,IAAM,EAAW,MAAM,MAAM,CAAC,kDAAkD,EAAE,EAAM,CAAC,EACzF,GAAI,CAAC,EAAS,EAAE,CACd,MAAM,AAAI,MAAM,CAAC,0CAA0C,EAAE,EAAM,CAAC,EAEtE,IAAM,EAAO,MAAM,EAAS,IAAI,GAChC,OAAO,EAAK,OAAO,AACrB,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,CAAC,GACP,IACT,CACF,CAjCA,EAAU,SAAS,CAAC,GAAG,CAAC,aACxB,SAAS,IAAI,CAAC,WAAW,CAAC,GAkCzB,AAAA,CAAA,UACC,IAAM,EAAY,SAAS,aAAa,CAAC,cAEnC,EAAiB,MAAO,EAAW,EAAU,KACjD,IAAM,EAAW,SAAS,aAAa,CAAC,OACxC,EAAS,SAAS,CAAC,GAAG,CAAC,aAEvB,IAAM,EAAa,SAAS,aAAa,CAAC,MAC1C,EAAW,SAAS,CAAC,GAAG,CAAC,eACzB,EAAW,WAAW,CAAG,EAEzB,IAAM,EAAc,SAAS,aAAa,CAAC,OAC3C,EAAY,SAAS,CAAC,GAAG,CAAC,gBAE1B,IAAM,EAAkB,SAAS,aAAa,CAAC,KAC/C,EAAgB,SAAS,CAAC,GAAG,CAAC,aAC9B,EAAgB,WAAW,CAAG,EAE9B,IAAM,EAAe,SAAS,aAAa,CAAC,OAC5C,EAAa,SAAS,CAAC,GAAG,CAAC,iBAE3B,IAAM,EAAU,SAAS,aAAa,CAAC,OACvC,EAAQ,SAAS,CAAC,GAAG,CAAC,YACtB,EAAQ,KAAK,CAAC,KAAK,CAAG,OAEtB,IAAM,EAAW,MAAM,EAAoB,GACvC,GACF,CAAA,EAAQ,GAAG,CAAG,CADhB,EAIA,EAAa,WAAW,CAAC,GACzB,EAAY,WAAW,CAAC,GACxB,EAAY,WAAW,CAAC,GACxB,EAAS,WAAW,CAAC,GACrB,EAAS,WAAW,CAAC,GAErB,EAAU,WAAW,CAAC,EACxB,EAIA,2BAA2B;AAC3B,IAAK,IAAM,IAHO,CAAC,QAAS,SAAU,SAAU,QAAS,UAAU,CAGpC,CAC7B,IAAM,EAAY,EAAM,MAAM,CAAC,GAAG,WAAW,GAAK,EAAM,KAAK,CAAC,GACxD,EAAW,MAAM,EAAe,EACtC,OAAM,EAAe,EAAW,EAAU,EAC5C,CACF,CAAA,G,4D","sources":["<anon>","src/index.mjs"],"sourcesContent":["\nconst $761f97bf09d51d3e$var$container = document.createElement(\"div\");\n$761f97bf09d51d3e$var$container.classList.add(\"container\");\ndocument.body.appendChild($761f97bf09d51d3e$var$container);\nasync function $761f97bf09d51d3e$var$fetchRandomDogImage(breed) {\n    try {\n        const response = await fetch(`https://dog.ceo/api/breed/${breed}/images/random`);\n        if (!response.ok) throw new Error(`Failed to fetch data for breed: ${breed}`);\n        const data = await response.json();\n        if (data.status === \"success\") return data.message;\n        else throw new Error(`Failed to fetch image for breed: ${breed}`);\n    } catch (error) {\n        console.error(error);\n        return null;\n    }\n}\nasync function $761f97bf09d51d3e$var$fetchBreedText(breed) {\n    try {\n        const response = await fetch(`https://en.wikipedia.org/api/rest_v1/page/summary/${breed}`);\n        if (!response.ok) throw new Error(`Failed to fetch Wikipedia data for breed: ${breed}`);\n        const data = await response.json();\n        return data.extract;\n    } catch (error) {\n        console.error(error);\n        return null;\n    }\n}\n(async ()=>{\n    const container = document.querySelector(\".container\");\n    const createWikiItem = async (breedName, wikiText, breed)=>{\n        const wikiItem = document.createElement(\"div\");\n        wikiItem.classList.add(\"wiki-item\");\n        const wikiHeader = document.createElement(\"h1\");\n        wikiHeader.classList.add(\"wiki-header\");\n        wikiHeader.textContent = breedName;\n        const wikiContent = document.createElement(\"div\");\n        wikiContent.classList.add(\"wiki-content\");\n        const wikiTextElement = document.createElement(\"p\");\n        wikiTextElement.classList.add(\"wiki-text\");\n        wikiTextElement.textContent = wikiText;\n        const imgContainer = document.createElement(\"div\");\n        imgContainer.classList.add(\"img-container\");\n        const wikiImg = document.createElement(\"img\");\n        wikiImg.classList.add(\"wiki-img\");\n        wikiImg.style.width = \"100%\";\n        const imageUrl = await $761f97bf09d51d3e$var$fetchRandomDogImage(breed);\n        if (imageUrl) wikiImg.src = imageUrl;\n        imgContainer.appendChild(wikiImg);\n        wikiContent.appendChild(wikiTextElement);\n        wikiContent.appendChild(imgContainer);\n        wikiItem.appendChild(wikiHeader);\n        wikiItem.appendChild(wikiContent);\n        container.appendChild(wikiItem);\n    };\n    const dogBreeds = [\n        \"husky\",\n        \"beagle\",\n        \"poodle\",\n        \"akita\",\n        \"bulldog\"\n    ];\n    // Generate five wiki items\n    for (const breed of dogBreeds){\n        const breedName = breed.charAt(0).toUpperCase() + breed.slice(1);\n        const wikiText = await $761f97bf09d51d3e$var$fetchBreedText(breed);\n        await createWikiItem(breedName, wikiText, breed);\n    }\n})();\n\n\n//# sourceMappingURL=index.a9d9980a.js.map\n","import \"./styles.css\";\n\nconst container = document.createElement(\"div\");\ncontainer.classList.add(\"container\");\ndocument.body.appendChild(container);\n\nasync function fetchRandomDogImage(breed) {\n  try {\n    const response = await fetch(`https://dog.ceo/api/breed/${breed}/images/random`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch data for breed: ${breed}`);\n    }\n    const data = await response.json();\n    if (data.status === \"success\") {\n      return data.message;\n    } else {\n      throw new Error(`Failed to fetch image for breed: ${breed}`);\n    }\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n}\n\nasync function fetchBreedText(breed) {\n  try {\n    const response = await fetch(`https://en.wikipedia.org/api/rest_v1/page/summary/${breed}`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch Wikipedia data for breed: ${breed}`);\n    }\n    const data = await response.json();\n    return data.extract;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n}\n\n(async () => {\n  const container = document.querySelector(\".container\");\n\n  const createWikiItem = async (breedName, wikiText, breed) => {\n    const wikiItem = document.createElement(\"div\");\n    wikiItem.classList.add(\"wiki-item\");\n\n    const wikiHeader = document.createElement(\"h1\");\n    wikiHeader.classList.add(\"wiki-header\");\n    wikiHeader.textContent = breedName;\n\n    const wikiContent = document.createElement(\"div\");\n    wikiContent.classList.add(\"wiki-content\");\n\n    const wikiTextElement = document.createElement(\"p\");\n    wikiTextElement.classList.add(\"wiki-text\");\n    wikiTextElement.textContent = wikiText;\n\n    const imgContainer = document.createElement(\"div\");\n    imgContainer.classList.add(\"img-container\");\n\n    const wikiImg = document.createElement(\"img\");\n    wikiImg.classList.add(\"wiki-img\");\n    wikiImg.style.width = \"100%\";\n\n    const imageUrl = await fetchRandomDogImage(breed);\n    if (imageUrl) {\n      wikiImg.src = imageUrl;\n    }\n\n    imgContainer.appendChild(wikiImg);\n    wikiContent.appendChild(wikiTextElement);\n    wikiContent.appendChild(imgContainer);\n    wikiItem.appendChild(wikiHeader);\n    wikiItem.appendChild(wikiContent);\n\n    container.appendChild(wikiItem);\n  };\n\n  const dogBreeds = [\"husky\", \"beagle\", \"poodle\", \"akita\", \"bulldog\"];\n\n  // Generate five wiki items\n  for (const breed of dogBreeds) {\n    const breedName = breed.charAt(0).toUpperCase() + breed.slice(1);\n    const wikiText = await fetchBreedText(breed);\n    await createWikiItem(breedName, wikiText, breed);\n  }\n})();"],"names":["$761f97bf09d51d3e$var$container","document","createElement","$761f97bf09d51d3e$var$fetchRandomDogImage","breed","response","fetch","ok","Error","data","json","status","message","error","console","$761f97bf09d51d3e$var$fetchBreedText","extract","classList","add","body","appendChild","container","querySelector","createWikiItem","breedName","wikiText","wikiItem","wikiHeader","textContent","wikiContent","wikiTextElement","imgContainer","wikiImg","style","width","imageUrl","src","charAt","toUpperCase","slice"],"version":3,"file":"index.a9d9980a.js.map"}